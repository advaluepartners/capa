--- node_modules/shared-data/index.js.backup	2024-06-29 18:18:03
+++ node_modules/shared-data/index.js	2024-06-29 18:25:18
@@ -1,4 +1,3 @@
-const v8 = require('v8');
 module.exports = class SharedData {
     #data;
     #typeConfigurator = {
@@ -12,70 +11,51 @@
         "float64": (data) => new Float64Array(data),
     };
     #type;
-    /**
-     * @param {number} length Size BufferArray
-     * @param {'int8'|'int16'|'int32'|'uint8'|'uint16'|'uint32'|'float32'|'float64'} type Type BufferArray
-     * @default type int32
-     * @default length 1024
-     */
-    constructor(length = 1024, type){
+
+    constructor(length = 1024, type) {
         this.#type = type || "int32";
         this.#data = this.#typeConfigurator[type || "int32"](new SharedArrayBuffer(length));
     }
-    /**
-     * @param {workerData} data
-     * @description It's method return new class SharedData, with SharedArrayBuffer
-     * @returns {SharedData}
-     */
-    new(data){
+
+    new(data) {
         this.#data = data;
         return this;
     }
-    /**
-     * @param {Object|Array|string|number|boolean} data
-     * @returns {Promise}
-     */
-    async add(data){
-        v8.serialize(data).map((element, index) => {
+
+    async add(data) {
+        const serialized = this.serialize(data);
+        serialized.forEach((element, index) => {
             Atomics.add(this.#data, index, element);
         });
     }
-    /**
-     * @param {Object|Array|string|number|boolean} data
-     * @description Not atomics method
-     */
-    na_add(data){
-        v8.serialize(data).map((element, index) => {
+
+    na_add(data) {
+        const serialized = this.serialize(data);
+        serialized.forEach((element, index) => {
             this.#data[index] = element;
         });
     }
-    /**
-     * @description Not atomics method
-     * @returns {number[]} Array bytes
-     */
-    na_get(){
+
+    na_get() {
         return this.#data;
     }
-    /**
-     * @param {number} from from index
-     * @param {number} to to index
-     * @returns {Promise} number[] - Array bytes
-     */
-    async get(from, to){
+
+    async get(from, to) {
         const result = [];
-        while(from < to){
+        while (from < to) {
             result.push(Atomics.load(this.#data, from))
             from++;
         }
         return result;
     }
-    /**
-     * @param {SharedArrayBuffer|null} data
-     * @description Method return data from class SharedData, or serialized data from argument
-     * @returns {*}
-     * @returns {Promise} Any data from argument or a class context
-     */
-    async serialize(data){
-        return v8.deserialize(new Buffer.from(this.#typeConfigurator[this.#type](data || this.#data)));
+
+    serialize(data) {
+        // Simple serialization using JSON
+        return new TextEncoder().encode(JSON.stringify(data));
     }
-}
\ No newline at end of file
+
+    deserialize(data) {
+        // Simple deserialization using JSON
+        return JSON.parse(new TextDecoder().decode(data));
+    }
+}
